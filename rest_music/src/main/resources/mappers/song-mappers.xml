<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.rest.repository.SongDao">

	<select id="detailBySongId" resultType="SongDetail">
        SELECT s.title AS song_title, a.album_name, a.album_image, s.genre, si.singer_name,
        LISTAGG(DISTINCT wr.writer, ', ') WITHIN GROUP (ORDER BY wr.writer) AS writers,
        LISTAGG(DISTINCT co.composer, ', ') WITHIN GROUP (ORDER BY co.composer) AS composers,
        LISTAGG(DISTINCT ar.arranger, ', ') WITHIN GROUP (ORDER BY ar.arranger) AS arrangers,
        s.lyrics
        FROM
            songs s
        JOIN
            albums a ON s.album_id = a.album_id
        LEFT JOIN
            singers si ON s.song_id = si.song_id
        LEFT JOIN
            writers wr ON s.song_id = wr.song_id
        LEFT JOIN
            composers co ON s.song_id = co.song_id
        LEFT JOIN
            arrangers ar ON s.song_id = ar.song_id
        WHERE
            s.song_id = #{id}
        GROUP BY s.title, a.album_name, a.album_image, s.genre, si.singer_name, s.lyrics
    </select>
  
    <select id="isLikes" resultType="integer">
        select count(*) from likes where song_id = #{songId} and id = #{id}
    </select>
    
    <insert id="addLike">
        insert into likes (song_id, id) values (#{songId}, #{id})
    </insert>
    
    <delete id="removeLike">
        delete from likes where song_id = #{songId} and id = #{id}
    </delete>
    
    <select id="searchSongs" resultType="ResultDto">
    <bind name="searchKeyword" value="'%' + keyword + '%'" />
    SELECT * FROM (
             SELECT rnum, song_id, album_image, album_name, title, singer_name
                         FROM (
                    SELECT 
                        rownum AS rnum, 
                        a.song_id, 
                        c.album_image, 
                        c.album_name, 
                        a.title, 
                        b.singer_name,
                        ROW_NUMBER() OVER (ORDER BY c.album_release_date DESC, a.song_id) AS row_num
                    FROM songs a
                    INNER JOIN singers b ON a.song_id = b.song_id
                    INNER JOIN albums c ON a.album_id = c.album_id
                <where>
                    <choose>
                        <when test='category.equals("t")'>
                            upper(a.title) like upper(#{searchKeyword})
                        </when>
                        <when test='category.equals("s")'>
                            upper(b.singer_name) like upper(#{searchKeyword})
                        </when>
                        <when test='category.equals("a")'>
                            upper(c.album_name) like upper(#{searchKeyword})
                        </when>
                        <when test='category.equals("ts")'>
                                 (
                                upper(a.title) like upper(#{searchKeyword})
                                OR
                                upper(b.singer_name) like upper(#{searchKeyword})
                            )
                        </when>
                    </choose>
                </where>
            )
            WHERE row_num BETWEEN #{startRow} AND #{endRow}
            )
    </select>
    
    <!-- 특정 회원이 특정 노래를 좋아요 했는지 여부 -->
    <select id="isLikes" resultType="Integer">
        select count(*) 
        from likes 
        where song_id = #{songId} and id = #{id}
    </select>
    
    <!-- 좋아요 개수 확인 -->
    <select id="countSongLikes" resultType="Integer">
        select count(*)
        from likes
        where song_id = #{songId}
    </select>

    <!-- 좋아요 추가 -->
    <insert id="addLike">
        insert into likes (song_id, id)
        values (#{songId}, #{id})
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="removeLike">
        delete from likes
        where song_id = #{songId} and id = #{id}
    </delete>
    
    <!-- TOP30 -->
    <select id="getAllSongs" resultType="SongChartDto">
        select
            so.song_id,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            count(l.song_id) as likes,
            so.song_path,
            so.video_link
        from songs so
        join albums a on so.album_id = a.album_id
        join singers si on so.song_id = si.song_id
        join likes l on so.song_id = l.song_id
        group by
            so.song_id,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            so.song_path,
            so.video_link
        order by count(l.song_id) desc
    </select>

    <!-- 장르별 차트 -->
    <select id="getSongsByGenre" resultType="SongChartDto">
        select
            so.song_id,
            so.genre,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            count(l.song_id) as likes,
            so.song_path,
            so.video_link
        from songs so
        join albums a on so.album_id = a.album_id
        join singers si on so.song_id = si.song_id
        join likes l on so.song_id = l.song_id
        where genre = #{genre}
        group by
            so.song_id,
            so.genre,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            so.song_path,
            so.video_link
        order by count(l.song_id) desc
    </select>
       
</mapper>


