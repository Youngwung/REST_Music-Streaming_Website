<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.rest.repository.SongDao">

	<select id="detailBySongId" resultType="SongDetail">
        SELECT s.title AS song_title, a.album_name, a.album_image, s.genre, si.singer_name,
        LISTAGG(DISTINCT wr.writer, ', ') WITHIN GROUP (ORDER BY wr.writer) AS writers,
        LISTAGG(DISTINCT co.composer, ', ') WITHIN GROUP (ORDER BY co.composer) AS composers,
        LISTAGG(DISTINCT ar.arranger, ', ') WITHIN GROUP (ORDER BY ar.arranger) AS arrangers,
        s.lyrics
        FROM
            songs s
            JOIN albums a ON s.album_id = a.album_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singer_name
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 1
                GROUP BY
                    ar.song_id
            ) singer ON s.song_id = singer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS writers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 2
                GROUP BY
                    ar.song_id
            ) writer ON s.song_id = writer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS composers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 3
                GROUP BY
                    ar.song_id
            ) composer ON s.song_id = composer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS arrangers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 4
                GROUP BY
                    ar.song_id
            ) arranger ON s.song_id = arranger.song_id
            LEFT JOIN song_genre sg ON s.song_id = sg.song_id
            LEFT JOIN genre_code gc ON sg.genre_id = gc.genre_id
        WHERE
            s.song_id = #{id}
        GROUP BY s.title, a.album_name, a.album_image, s.genre, si.singer_name, s.lyrics
    </select>
  
    <select id="isLikes" resultType="integer">
        select count(*) from likes where song_id = #{songId} and id = #{id}
    </select>
    
    <insert id="addLike">
        insert into likes (song_id, id) values (#{songId}, #{id})
    </insert>
    
    <delete id="removeLike">
        delete from likes where song_id = #{songId} and id = #{id}
    </delete>
    
    <select id="searchSongs" resultType="ResultDto">
    <bind name="searchKeyword" value="'%' + keyword + '%'" />
                            SELECT * FROM (
                    SELECT songId, albumName, albumImage, title, singerName, releaseDate, rnum
                    FROM (
                        SELECT s.song_id AS songId,
                               a.album_name AS albumName,
                               a.album_image AS albumImage,
                               s.title AS title,
                               art.artist_name AS singerName,
                               a.album_release_date AS releaseDate,
                               ROW_NUMBER() OVER (ORDER BY a.album_release_date DESC) AS rnum
                        FROM songs s
                        JOIN albums a ON s.album_id = a.album_id
                        JOIN artist_roles ar ON s.song_id = ar.song_id AND ar.role_id = 1 
                        JOIN artists art ON ar.artist_id = art.artist_id
                    <where>
                        <choose>
                            <when test='category.equals("t")'>
                                upper(s.title) like upper(#{searchKeyword})
                            </when>
                            <when test='category.equals("s")'>
                                upper(art.artist_name) like upper(#{searchKeyword})
                            </when>
                            <when test='category.equals("ts")'>
                                upper(s.title) like upper(#{searchKeyword})
                                or
                                upper(art.artist_name) like upper(#{searchKeyword})
                            </when>
                            <when test='category.equals("a")'>
                                upper(a.album_name) like upper(#{searchKeyword})
                            </when>
                        </choose>
                    </where>
                    ORDER BY a.album_release_date DESC
                )
                WHERE ROWNUM &lt;= #{endRow}
            )
            WHERE rnum >= #{startRow}
        </select>
    
    <!-- 좋아요 개수 확인 -->
    <select id="countSongLikes" resultType="Integer">
        select count(*)
        from likes
        where song_id = #{songId}
    </select>
    
    <!-- TOP30 -->
    <select id="getAllSongs" resultType="SongChartDto">
        select
            so.song_id,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            count(l.song_id) as likes,
            so.song_path,
            so.video_link
        from songs so
        join albums a on so.album_id = a.album_id
        join singers si on so.song_id = si.song_id
        join likes l on so.song_id = l.song_id
        group by
            so.song_id,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            so.song_path,
            so.video_link
        order by count(l.song_id) desc
    </select>
>>>>>>> refs/heads/develop

    <!-- 장르별 차트 -->
    <select id="getSongsByGenre" resultType="SongChartDto">
        select
            so.song_id,
            so.genre,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            count(l.song_id) as likes,
            so.song_path,
            so.video_link
        from songs so
        join albums a on so.album_id = a.album_id
        join singers si on so.song_id = si.song_id
        join likes l on so.song_id = l.song_id
        where genre = #{genre}
        group by
            so.song_id,
            so.genre,
            a.album_image,
            a.album_id,
            so.title,
            si.singer_name,
            a.album_name,
            so.song_path,
            so.video_link
        order by count(l.song_id) desc
    </select>
       
</mapper>


