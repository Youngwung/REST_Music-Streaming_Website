<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.rest.repository.SongDao">

	<select id="detailBySongId" resultType="SongDetail">
         SELECT
            s.song_id,
            s.title AS song_title,
            a.album_name AS album_name,
            a.album_image AS album_image,
            singer.singer_name,
            writer.writers,
            composer.composers,
            arranger.arrangers,
            LISTAGG(gc.genre_name, ', ') WITHIN GROUP (ORDER BY gc.genre_name) AS genre,
            s.lyrics
        FROM
            songs s
            JOIN albums a ON s.album_id = a.album_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singer_name
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 10
                GROUP BY
                    ar.song_id
            ) singer ON s.song_id = singer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS writers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 30
                GROUP BY
                    ar.song_id
            ) writer ON s.song_id = writer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS composers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 20
                GROUP BY
                    ar.song_id
            ) composer ON s.song_id = composer.song_id
            LEFT JOIN (
                SELECT
                    ar.song_id,
                    LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS arrangers
                FROM
                    artist_roles ar
                    JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                    ar.role_id = 40
                GROUP BY
                    ar.song_id
            ) arranger ON s.song_id = arranger.song_id
            LEFT JOIN song_genre sg ON s.song_id = sg.song_id
            LEFT JOIN genre_code gc ON sg.genre_id = gc.genre_id
        WHERE
            s.song_id = #{id}
        GROUP BY
            s.song_id, s.title, a.album_name, a.album_image, s.lyrics, singer.singer_name, writer.writers, 
            composer.composers, arranger.arrangers
    </select>
  
    <select id="isLikes" resultType="integer">
        select count(*) from likes where song_id = #{songId} and id = #{loginUserId}
    </select>
    
    <insert id="addLike">
        insert into likes (song_id, id) values (#{songId}, #{loginUserId})
    </insert>
    
    <delete id="removeLike">
        delete from likes where song_id = #{songId} and id = #{loginUserId}
    </delete>
    
  <select id="searchSongs" resultType="ResultDto">
    <bind name="searchKeyword" value="'%' + keyword + '%'" />
    SELECT * FROM (
        SELECT songId, albumName, albumImage, title, singerName, releaseDate, score, rnum
        FROM (
            SELECT s.song_id AS songId,
                   a.album_name AS albumName,
                   a.album_image AS albumImage,
                   s.title AS title,
                   LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singerName,
                   a.album_release_date AS releaseDate,
                   MAX(SCORE(1)) AS score,
                   ROW_NUMBER() OVER (
                       <choose>
                           <when test='sortType.equals("accuracy")'>
                               ORDER BY MAX(SCORE(1)) DESC
                           </when>
                           <when test='sortType.equals("recency")'>
                               ORDER BY a.album_release_date DESC
                           </when>
                           <when test='sortType.equals("alphabet")'>
                               ORDER BY s.title ASC
                           </when>
                       </choose>
                   ) AS rnum
            FROM songs s
            JOIN albums a ON s.album_id = a.album_id
            JOIN artist_roles ar ON s.song_id = ar.song_id AND ar.role_id = 10
            JOIN artists art ON ar.artist_id = art.artist_id
            WHERE 1=1
            <choose>
                <when test='category.equals("t")'>
                    AND CONTAINS(s.title, #{searchKeyword}, 1) > 0
                </when>
                <when test='category.equals("s")'>
                    AND CONTAINS(art.artist_name, #{searchKeyword}, 1) > 0
                </when>
                <when test='category.equals("ts")'>
                    AND (CONTAINS(s.title, #{searchKeyword}, 1) > 0
                    OR CONTAINS(art.artist_name, #{searchKeyword}, 2) > 0)
                </when>
                <when test='category.equals("a")'>
                    AND CONTAINS(a.album_name, #{searchKeyword}, 1) > 0
                </when>
            </choose>
            GROUP BY s.song_id, a.album_name, a.album_image, s.title, a.album_release_date
        )
        WHERE ROWNUM &lt;= #{endRow}
    )
    WHERE rnum >= #{startRow}
    </select>

    
    <!-- 좋아요 개수 확인 -->
    <select id="countSongLikes" resultType="Integer">
        select count(*)
        from likes
        where song_id = #{songId}
    </select>
    
    <!-- TOP30 -->
    <select id="getAllSongs" resultType="SongChartDto">
        select
            s.song_id,
            al.album_id,
            al.album_image,
            s.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            count(l.song_id) as likes,
            s.song_path,
            s.video_link
        from songs s
        join albums al on s.album_id = al.album_id
        join artist_roles role on s.song_id = role.song_id
        join artists ar on role.artist_id = ar.artist_id
        left join likes l on s.song_id = l.song_id
        where role.role_id = (select role_id from role_code where role_name = '가수')
        group by
            s.song_id,
            al.album_id,
            al.album_image,
            s.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            s.song_path,
            s.video_link
        order by count(l.song_id) desc
    </select>

    <!-- 장르별 차트 -->
    <select id="getSongsByGenre" resultType="SongChartDto">
        select
            so.song_id,
            gc.genre_name,
            al.album_id,
            al.album_image,
            so.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            count(l.song_id) as likes,
            so.song_path,
            so.video_link
        from songs so
        join albums al on so.album_id = al.album_id
        join song_genre sg on so.song_id = sg.song_id
        join genre_code gc on sg.genre_id = gc.genre_id
        join artist_roles role on so.song_id = role.song_id
        join artists ar on role.artist_id = ar.artist_id
        left join likes l on so.song_id = l.song_id
        where sg.genre_id = (select genre_id from genre_code where genre_name = #{genreName})
        and role.role_id = (select role_id from role_code where role_name = '가수')
        group by
            so.song_id,
            gc.genre_name,
            al.album_id,
            al.album_image,
            so.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            so.song_path,
            so.video_link
        order by count(l.song_id) desc
    </select>
    
    
    <!-- 최신 음악 -->
    <select id="getNewestSongs" resultType="SongChartDto">
        select
            s.song_id,
            al.album_id,
            al.album_image,
            al.album_release_date,
            s.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            count(l.song_id) as likes,
            s.song_path,
            s.video_link
        from songs s
        join albums al on s.album_id = al.album_id
        join artist_roles role on s.song_id = role.song_id
        join artists ar on role.artist_id = ar.artist_id
        left join likes l on s.song_id = l.song_id
        where role.role_id = (select role_id from role_code where role_name = '가수')
        group by
            s.song_id,
            al.album_id,
            al.album_image,
            al.album_release_date,
            s.title,
            ar.artist_id,
            ar.artist_name,
            al.album_name,
            s.song_path,
            s.video_link
        order by al.album_release_date desc
    </select>
    
    
       
</mapper>


